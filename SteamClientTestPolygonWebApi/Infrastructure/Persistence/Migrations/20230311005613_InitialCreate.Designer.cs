// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamClientTestPolygonWebApi.Infrastructure.Persistence;

#nullable disable

namespace SteamClientTestPolygonWebApi.Migrations
{
    [DbContext(typeof(SteamTradeApiDbContext))]
    [Migration("20230311005613_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("SteamClientTestPolygonWebApi.Domain.GameInventoryAggregate.GameInventory", b =>
                {
                    b.Property<string>("OwnerSteam64Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("AppId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdateTimeUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("OwnerSteam64Id", "AppId");

                    b.ToTable("GameInventories", (string)null);
                });

            modelBuilder.Entity("SteamClientTestPolygonWebApi.Domain.GameItemAggregate.GameItem", b =>
                {
                    b.Property<int>("AppId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MarketHashName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.HasKey("AppId", "MarketHashName");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("SteamClientTestPolygonWebApi.Domain.GameInventoryAggregate.GameInventory", b =>
                {
                    b.OwnsMany("SteamClientTestPolygonWebApi.Domain.GameInventoryAggregate.Entities.GameInventoryAsset", "Assets", b1 =>
                        {
                            b1.Property<string>("AssetId")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("OwnerSteam64Id")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<int>("AppId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("InstanceId")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<bool>("IsMarketable")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsTradable")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("ItemMarketHashName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<DateTime?>("TradeCooldownUntilUtc")
                                .HasColumnType("TEXT");

                            b1.HasKey("AssetId", "OwnerSteam64Id", "AppId");

                            b1.HasIndex("AppId", "ItemMarketHashName");

                            b1.HasIndex("OwnerSteam64Id", "AppId");

                            b1.ToTable("GameInventoryAssets", (string)null);

                            b1.HasOne("SteamClientTestPolygonWebApi.Domain.GameItemAggregate.GameItem", null)
                                .WithMany()
                                .HasForeignKey("AppId", "ItemMarketHashName")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("OwnerSteam64Id", "AppId");
                        });

                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
